{"version":3,"sources":["BooksAPI.js","Selector.js","Utils.js","Book.js","Bookshelf.js","Homepage.js","SearchBar.js","SearchPage.js","App.js","serviceWorker.js","index.js"],"names":["api","token","localStorage","Math","random","toString","substr","headers","Accept","Authorization","update","book","shelf","fetch","id","method","body","JSON","stringify","then","res","json","search","query","data","books","Selector","categories","defaultCategory","onMove","value","onChange","e","target","disabled","map","category","key","replace","trim","split","word","charAt","toUpperCase","slice","join","Book","state","title","authors","coverImage","dragging","handleMove","newShelf","props","preventDefault","BooksAPI","setState","handleDragStart","dataTransfer","setData","dropEffect","handleDragEnd","bookId","this","imageLinks","thumbnail","classNames","push","draggable","className","onDragStart","onDragEnd","src","alt","shelves","author","Component","Bookshelf","dropArea","handleDragOver","handleDragEnter","handleDragLeave","prevState","_getDropAreaClass","classes","onDrop","shelfName","dnd","dropAreaClass","onDragEnter","onDragOver","onDragLeave","Homepage","handleDrop","getData","find","currentlyReading","filter","wantToRead","read","to","SearchBar","onSearch","type","SearchPage","_getBookRaw","Array","isArray","_getBook","debounce","handleSearch","length","App","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.16fa4d4e.chunk.js","sourcesContent":["const api = 'https://reactnd-books-api.udacity.com';\n\n// Generate a unique token for storing your bookshelf data on the backend server.\nlet token = localStorage.token;\nif (!token)\n  token = localStorage.token = Math.random()\n    .toString(36)\n    .substr(-8);\n\nconst headers = {\n  Accept: 'application/json',\n  Authorization: token\n};\n\nexport const get = (bookId) =>\n  fetch(`${api}/books/${bookId}`, { headers })\n    .then((res) => res.json())\n    .then((data) => data.book);\n\nexport const getAll = () =>\n  fetch(`${api}/books`, { headers })\n    .then((res) => res.json())\n    .then((data) => data.books);\n\nexport const update = (book, shelf) =>\n  fetch(`${api}/books/${book.id}`, {\n    method: 'PUT',\n    headers: {\n      ...headers,\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({ shelf })\n  }).then((res) => res.json());\n\nexport const search = (query) =>\n  fetch(`${api}/search`, {\n    method: 'POST',\n    headers: {\n      ...headers,\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({ query })\n  })\n    .then((res) => res.json())\n    .then((data) => data.books);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { camelToTitleCase } from './Utils';\n\nfunction Selector({ categories, defaultCategory, onMove }) {\n  return (\n    <select\n      value={defaultCategory}\n      onChange={(e) => onMove(e, e.target.value)}\n    >\n      <option disabled>Move to ...</option>\n      {categories.map((category) => (\n        <option key={category} value={category}>\n          {camelToTitleCase(category)}\n        </option>\n      ))}\n    </select>\n  );\n}\n\nSelector.propTypes = {\n  categories: PropTypes.arrayOf(PropTypes.string),\n  defaultCategory: PropTypes.string,\n  onMove: PropTypes.func\n};\n\nexport default Selector;\n","export const makeCancelable = (promise) => {\n  let hasCanceled_ = false;\n\n  const wrappedPromise = new Promise((resolve, reject) => {\n    promise.then(\n      (val) =>\n        hasCanceled_ ? reject({ isCanceled: true }) : resolve(val),\n      (error) =>\n        hasCanceled_ ? reject({ isCanceled: true }) : reject(error)\n    );\n  });\n\n  return {\n    promise: wrappedPromise,\n    cancel() {\n      hasCanceled_ = true;\n    }\n  };\n};\n\nexport function camelToTitleCase(text) {\n  const words = text\n    .replace(/([A-Z])/g, ' $1')\n    .trim()\n    .split(' ');\n  return words\n    .map((word) => word.charAt(0).toUpperCase() + word.slice(1))\n    .join(' ');\n}\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport Selector from './Selector';\nimport * as BooksAPI from './BooksAPI';\n\nclass Book extends Component {\n  state = {\n    id: '',\n    title: '',\n    authors: '',\n    coverImage: '',\n    shelf: '',\n    dragging: false\n  };\n\n  componentDidMount() {\n    BooksAPI.get(this.props.id).then((book) => {\n      const id = book.id;\n      const title = book.title;\n      const authors = book.authors;\n      const coverImage = book.imageLinks\n        ? book.imageLinks.thumbnail\n        : '';\n      const shelf = book.shelf;\n      this.setState({\n        id,\n        title,\n        authors,\n        coverImage,\n        shelf\n      });\n    });\n  }\n\n  handleMove = (e, newShelf) => {\n    const onMove = this.props.onMove;\n    e.preventDefault();\n    if (this.state.id !== '') {\n      BooksAPI.update(this.state, newShelf).then(() => {\n        onMove && onMove(this.state.id, newShelf);\n        this.setState({ shelf: newShelf });\n      });\n    }\n  };\n\n  handleDragStart = (e, id) => {\n    e.dataTransfer.setData('text/plain', id);\n    e.dataTransfer.dropEffect = 'move';\n    this.setState({ dragging: true });\n  };\n\n  handleDragEnd = () => {\n    this.setState({ dragging: false });\n  };\n\n  render() {\n    const { id, title, authors, coverImage, shelf } = this.state;\n    let classNames = ['book'];\n    this.state.dragging && classNames.push('dragging');\n    classNames = classNames.join(' ');\n    return (\n      <div\n        draggable={this.props.draggable}\n        className={classNames}\n        onDragStart={(e) => this.handleDragStart(e, id)}\n        onDragEnd={this.handleDragEnd}\n      >\n        <div className=\"book-top\">\n          <img\n            className=\"book-cover\"\n            src={coverImage}\n            alt={title}\n            draggable=\"false\"\n          />\n          <div className=\"book-shelf-changer\">\n            <Selector\n              categories={this.props.shelves}\n              defaultCategory={shelf}\n              bookId={id}\n              onMove={this.handleMove}\n            />\n          </div>\n        </div>\n        <h3 className=\"book-title\">{title}</h3>\n        <p className=\"book-authors\">\n          {authors &&\n            authors.map((author) => (\n              <span key={author}>\n                {author}\n                <br></br>\n              </span>\n            ))}\n        </p>\n      </div>\n    );\n  }\n}\n\nBook.propTypes = {\n  id: PropTypes.string.isRequired,\n  shelves: PropTypes.arrayOf(PropTypes.string),\n  onMove: PropTypes.func\n};\n\nexport default Book;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport Book from './Book';\n\nclass Bookshelf extends Component {\n  state = { dropArea: false };\n\n  handleDragOver = (e) => {\n    e.preventDefault();\n  };\n\n  handleDragEnter = (e) => {\n    e.preventDefault();\n    this.setState({ dropArea: true });\n  };\n\n  handleDragLeave = (e) => {\n    e.preventDefault();\n    this.setState((prevState) => {\n      return { dropArea: false };\n    });\n  };\n\n  _getDropAreaClass = () => {\n    let classes = ['drop-area'];\n    if (!this.state.dropArea) classes.push('hidden');\n    return classes.join(' ');\n  };\n\n  render() {\n    const {\n      title,\n      books,\n      shelves,\n      onMove,\n      onDrop,\n      shelfName,\n      dnd\n    } = this.props;\n\n    let dropAreaClass = this._getDropAreaClass();\n    return (\n      <div\n        className=\"bookshelf\"\n        onDragEnter={this.handleDragEnter}\n        onDragOver={this.handleDragOver}\n        onDrop={(e) => {\n          this.handleDragLeave(e);\n          onDrop(e, shelfName);\n        }}\n      >\n        {title && <h2 className=\"bookshelf-title\">{title}</h2>}\n        <div\n          className={dropAreaClass}\n          onDragLeave={(e) => this.handleDragLeave(e)}\n        >\n          <p>Move book to shelf: {title}</p>\n        </div>\n        <ul className=\"books-grid\">\n          {books.map((book) => (\n            <Book\n              key={book.id}\n              id={book.id}\n              shelves={shelves}\n              onMove={onMove}\n              draggable={dnd}\n            />\n          ))}\n        </ul>\n      </div>\n    );\n  }\n}\n\nBookshelf.propTypes = {\n  title: PropTypes.string,\n  books: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired\n    }).isRequired\n  ),\n  shelfName: PropTypes.string,\n  shelves: PropTypes.arrayOf(PropTypes.string),\n  dnd: PropTypes.bool,\n  onMove: PropTypes.func,\n  onDrop: PropTypes.func\n};\n\nexport default Bookshelf;\n","import React, { Component } from 'react';\nimport * as BooksAPI from './BooksAPI';\nimport Bookshelf from './Bookshelf';\nimport { Link } from 'react-router-dom';\n\nclass Homepage extends Component {\n  state = {\n    books: [],\n    shelves: ['currentlyReading', 'wantToRead', 'read', 'none']\n  };\n\n  async componentDidMount() {\n    const books = await BooksAPI.getAll();\n    if (books) this.setState({ books });\n  }\n\n  handleMove = (id, newShelf) => {\n    this.setState((prevState) => {\n      return {\n        books: prevState.books.map((book) => {\n          if (book.id === id) {\n            book.shelf = newShelf;\n          }\n          return book;\n        })\n      };\n    });\n  };\n\n  handleDrop = (e, shelf) => {\n    const id = e.dataTransfer.getData('text');\n    this.handleMove(id, shelf);\n    BooksAPI.update(\n      this.state.books.find((book) => book.id === id),\n      shelf\n    );\n  };\n\n  render() {\n    const shelves = this.state.shelves;\n    const currentlyReading = this.state.books.filter(\n      (book) => book.shelf === 'currentlyReading'\n    );\n    const wantToRead = this.state.books.filter(\n      (book) => book.shelf === 'wantToRead'\n    );\n    const read = this.state.books.filter(\n      (book) => book.shelf === 'read'\n    );\n    return (\n      <div className=\"page-content\">\n        <div className=\"list-books-title\">\n          <h1>MyReads</h1>\n        </div>\n        <Bookshelf\n          title=\"Currently Reading\"\n          books={currentlyReading}\n          shelfName=\"currentlyReading\"\n          shelves={shelves}\n          dnd={true}\n          onMove={this.handleMove}\n          onDrop={this.handleDrop}\n        />\n        <Bookshelf\n          title=\"Want to Read\"\n          books={wantToRead}\n          shelfName=\"wantToRead\"\n          shelves={shelves}\n          dnd={true}\n          onMove={this.handleMove}\n          onDrop={this.handleDrop}\n        />\n        <Bookshelf\n          title=\"Read\"\n          books={read}\n          shelfName=\"read\"\n          shelves={shelves}\n          dnd={true}\n          onMove={this.handleMove}\n          onDrop={this.handleDrop}\n        />\n        <Link className=\"open-search\" to=\"/search\">\n          <button />\n        </Link>\n      </div>\n    );\n  }\n}\n\nexport default Homepage;\n","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nfunction SearchBar({ value, onSearch }) {\n  return (\n    <div className=\"search-books-bar\">\n      <Link to=\"/\" className=\"close-search\" />\n\n      <input type=\"text\" value={value} onChange={(e) => onSearch(e)} />\n    </div>\n  );\n}\n\nexport default SearchBar;\n","import React, { Component } from 'react';\nimport * as BooksAPI from './BooksAPI';\nimport Bookshelf from './Bookshelf';\nimport SearchBar from './SearchBar';\nimport { debounce } from 'lodash';\n\nclass SearchPage extends Component {\n  state = {\n    query: '',\n    books: [],\n    shelves: ['currentlyReading', 'wantToRead', 'read', 'none']\n  };\n\n  _getBookRaw = (query) => {\n    BooksAPI.search(query).then((books) =>\n      books && Array.isArray(books)\n        ? this.setState({ books })\n        : this.setState({ books: [] })\n    );\n  };\n\n  _getBook = debounce(this._getBookRaw, 300);\n\n  handleSearch = (e) => {\n    e.preventDefault();\n    const query = e.target.value;\n    this.setState({ query }, this._getBook(query));\n  };\n\n  render() {\n    return (\n      <div>\n        <SearchBar\n          onSearch={this.handleSearch}\n          value={this.state.query}\n        />\n        <div className=\"search-books-results\">\n          {this.state.books.length !== 0 ? (\n            <Bookshelf\n              books={this.state.books}\n              shelves={this.state.shelves}\n            />\n          ) : (\n            <h2>\n              No Books Found. Search for a category. (e.g. Poetry)\n            </h2>\n          )}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default SearchPage;\n","import React, { Component } from 'react';\nimport { Route } from 'react-router-dom';\nimport './App.css';\nimport Homepage from './Homepage';\nimport SearchPage from './SearchPage';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Route exact path=\"/\" component={Homepage} />\n        <Route exact path=\"/search\" component={SearchPage} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { BrowserRouter } from 'react-router-dom';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}